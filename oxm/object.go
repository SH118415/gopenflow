package oxm

import (
	"encoding/binary"
)

const (
	OFPXMC_NXM_0          = 0x0000
	OFPXMC_NXM_1          = 0x0001
	OFPXMC_OPENFLOW_BASIC = 0x8000
	OFPXMC_EXPERIMENTER   = 0xffff
)

const (
	OFPXMT_OFB_IN_PORT = iota
	OFPXMT_OFB_IN_PHY_PORT
	OFPXMT_OFB_METADATA
	OFPXMT_OFB_ETH_DST
	OFPXMT_OFB_ETH_SRC
	OFPXMT_OFB_ETH_TYPE
	OFPXMT_OFB_VLAN_VID
	OFPXMT_OFB_VLAN_PCP
	OFPXMT_OFB_IP_DSCP
	OFPXMT_OFB_IP_ECN
	OFPXMT_OFB_IP_PROTO
	OFPXMT_OFB_IPV4_SRC
	OFPXMT_OFB_IPV4_DST
	OFPXMT_OFB_TCP_SRC
	OFPXMT_OFB_TCP_DST
	OFPXMT_OFB_UDP_SRC
	OFPXMT_OFB_UDP_DST
	OFPXMT_OFB_SCTP_SRC
	OFPXMT_OFB_SCTP_DST
	OFPXMT_OFB_ICMPV4_TYPE
	OFPXMT_OFB_ICMPV4_CODE
	OFPXMT_OFB_ARP_OP
	OFPXMT_OFB_ARP_SPA
	OFPXMT_OFB_ARP_TPA
	OFPXMT_OFB_ARP_SHA
	OFPXMT_OFB_ARP_THA
	OFPXMT_OFB_IPV6_SRC
	OFPXMT_OFB_IPV6_DST
	OFPXMT_OFB_IPV6_FLABEL
	OFPXMT_OFB_ICMPV6_TYPE
	OFPXMT_OFB_ICMPV6_CODE
	OFPXMT_OFB_IPV6_ND_TARGET
	OFPXMT_OFB_IPV6_ND_SLL
	OFPXMT_OFB_IPV6_ND_TLL
	OFPXMT_OFB_MPLS_LABEL
	OFPXMT_OFB_MPLS_TC
	OFPXMT_OFB_MPLS_BOS
	OFPXMT_OFB_PBB_ISID
	OFPXMT_OFB_TUNNEL_ID
	OFPXMT_OFB_IPV6_EXTHDR
)

type Header uint32

const (
	OXM_CLASS_SHIFT   = 16
	OXM_FIELD_SHIFT   = 9
	OXM_HASMASK_SHIFT = 8
	OXM_TYPE_MASK     = 0xFFFFFE00
	OXM_CLASS_MASK    = 0xFFFF0000
	OXM_FIELD_MASK    = 0x0000FE00
	OXM_HASMASK_MASK  = 0x00000100
	OXM_LENGTH_MASK   = 0x000000FF
)

func (self Header) Type() uint32 {
	return uint32(self & OXM_TYPE_MASK)
}

func (self Header) Class() uint16 {
	return uint16(self >> OXM_CLASS_SHIFT)
}

func (self Header) Field() uint8 {
	return uint8((self & OXM_FIELD_MASK) >> OXM_FIELD_SHIFT)
}

func (self Header) HasMask() bool {
	return (self & OXM_HASMASK_MASK) != 0
}

// Length of OXM payload
func (self Header) Length() int {
	return int(self & OXM_LENGTH_MASK)
}

func (self *Header) SetLength(length int) {
	*self = (*self &^ OXM_LENGTH_MASK) | Header(length&OXM_LENGTH_MASK)
}

func (self *Header) SetMask(mask bool) {
	if mask {
		*self |= OXM_HASMASK_MASK
	} else {
		*self &^= OXM_HASMASK_MASK
	}
}

/*
OXM_OF_ constnts are defined as combinations of OFPXMC_OPENFLOW_BASIC and their field.
Following constants does not have oxm_hasmask and length.

Following constants are usually used as match key.
Experimenter oxm may have variable sized length or mask, and experimenter
match key would be mixed with basic oxm key.
So match key would better not have length and mask.
This is because these constants does not have length and mask included.
*/
const (
	OXM_OF_IN_PORT        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IN_PORT<<OXM_FIELD_SHIFT
	OXM_OF_IN_PHY_PORT    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IN_PHY_PORT<<OXM_FIELD_SHIFT
	OXM_OF_METADATA       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_METADATA<<OXM_FIELD_SHIFT
	OXM_OF_ETH_DST        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ETH_DST<<OXM_FIELD_SHIFT
	OXM_OF_ETH_SRC        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ETH_SRC<<OXM_FIELD_SHIFT
	OXM_OF_ETH_TYPE       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ETH_TYPE<<OXM_FIELD_SHIFT
	OXM_OF_VLAN_VID       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_VLAN_VID<<OXM_FIELD_SHIFT
	OXM_OF_VLAN_PCP       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_VLAN_PCP<<OXM_FIELD_SHIFT
	OXM_OF_IP_DSCP        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IP_DSCP<<OXM_FIELD_SHIFT
	OXM_OF_IP_ECN         = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IP_ECN<<OXM_FIELD_SHIFT
	OXM_OF_IP_PROTO       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IP_PROTO<<OXM_FIELD_SHIFT
	OXM_OF_IPV4_SRC       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV4_SRC<<OXM_FIELD_SHIFT
	OXM_OF_IPV4_DST       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV4_DST<<OXM_FIELD_SHIFT
	OXM_OF_TCP_SRC        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_TCP_SRC<<OXM_FIELD_SHIFT
	OXM_OF_TCP_DST        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_TCP_DST<<OXM_FIELD_SHIFT
	OXM_OF_UDP_SRC        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_UDP_SRC<<OXM_FIELD_SHIFT
	OXM_OF_UDP_DST        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_UDP_DST<<OXM_FIELD_SHIFT
	OXM_OF_SCTP_SRC       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_SCTP_SRC<<OXM_FIELD_SHIFT
	OXM_OF_SCTP_DST       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_SCTP_DST<<OXM_FIELD_SHIFT
	OXM_OF_ICMPV4_TYPE    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ICMPV4_TYPE<<OXM_FIELD_SHIFT
	OXM_OF_ICMPV4_CODE    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ICMPV4_CODE<<OXM_FIELD_SHIFT
	OXM_OF_ARP_OP         = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ARP_OP<<OXM_FIELD_SHIFT
	OXM_OF_ARP_SPA        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ARP_SPA<<OXM_FIELD_SHIFT
	OXM_OF_ARP_TPA        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ARP_TPA<<OXM_FIELD_SHIFT
	OXM_OF_ARP_SHA        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ARP_SHA<<OXM_FIELD_SHIFT
	OXM_OF_ARP_THA        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ARP_THA<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_SRC       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_SRC<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_DST       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_DST<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_FLABEL    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_FLABEL<<OXM_FIELD_SHIFT
	OXM_OF_ICMPV6_TYPE    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ICMPV6_TYPE<<OXM_FIELD_SHIFT
	OXM_OF_ICMPV6_CODE    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_ICMPV6_CODE<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_ND_TARGET = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_ND_TARGET<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_ND_SLL    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_ND_SLL<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_ND_TLL    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_ND_TLL<<OXM_FIELD_SHIFT
	OXM_OF_MPLS_LABEL     = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_MPLS_LABEL<<OXM_FIELD_SHIFT
	OXM_OF_MPLS_TC        = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_MPLS_TC<<OXM_FIELD_SHIFT
	OXM_OF_MPLS_BOS       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_MPLS_BOS<<OXM_FIELD_SHIFT
	OXM_OF_PBB_ISID       = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_PBB_ISID<<OXM_FIELD_SHIFT
	OXM_OF_TUNNEL_ID      = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_TUNNEL_ID<<OXM_FIELD_SHIFT
	OXM_OF_IPV6_EXTHDR    = OFPXMC_OPENFLOW_BASIC<<OXM_CLASS_SHIFT | OFPXMT_OFB_IPV6_EXTHDR<<OXM_FIELD_SHIFT
)

type Oxm []byte

func (self Oxm) Header() Header {
	return Header(binary.BigEndian.Uint32(self))
}

func (self Oxm) Iter() []Oxm {
	var ret []Oxm
	for i := 0; i+4 < len(self); i += 4 + int(self[i+3]) {
		ret = append(ret, Oxm(self[i:i+4+int(self[i+3])]))
	}
	return ret
}
